Vite and Module Federation Makes Micro-Frontends EASY! (https://www.youtube.com/watch?v=t-nchkL9yIg)

https://github.com/jherr/vite-mod-fed
https://github.com/Annie-Huang/vite-mod-fed
Keep in mind this tutorial is created in  4 Apr 2023 and I am doing this in 12/05/2024.
And I am doing it in typescript as well. so bound to have a lot of lib upgrade and twisting.

https://github.com/originjs/vite-plugin-federation

---------------------------------------------------------------------

PS C:\react\vite-mod-fed> pnpm create vite remote --template react-ts

Scaffolding project in C:\react\vite-mod-fed\remote...

Done. Now run:

  cd remote
  pnpm install
  pnpm run dev

PS C:\react\vite-mod-fed> cd .\remote\
PS C:\react\vite-mod-fed\remote> pnpm add @originjs/vite-plugin-federation -D
PS C:\react\vite-mod-fed\remote> npm run dev
PS C:\react\vite-mod-fed\remote> pnpm add jotai
http://localhost:5001/


Whenever you change a vite.config.ts file, you will need to:
PS C:\react\vite-mod-fed\remote> npm run build      <-- create the remoteEntry.js file
PS C:\react\vite-mod-fed\remote> npm run serve  (or npm run preview)
http://localhost:5001/assets/remoteEntry.js     <-- To check if the remote bundle is created successfully.



-----------------------------------

PS C:\react\vite-mod-fed> pnpm create vite host --template react-ts

Scaffolding project in C:\react\vite-mod-fed\host...

Done. Now run:

  cd host
  pnpm install
  pnpm run dev

PS C:\react\vite-mod-fed> cd .\host\
PS C:\react\vite-mod-fed\host> pnpm install
PS C:\react\vite-mod-fed\host> pnpm add @originjs/vite-plugin-federation -D
PS C:\react\vite-mod-fed\host> npm run dev
http://localhost:5173/      <-- it will randomly sprint up the port number as we didn't enforce it to certain port number.


-----------------------------------

PS C:\react\vite-mod-fed> npx create-mf-app
? Pick the name of your app: wp-host
? Project Type: Application
? Port number: 8080
? Framework: react
? Language: typescript
? CSS: CSS
? Packer: Webpack
Your 'wp-host' project is ready to go.

Next steps:

▶️ cd wp-host
▶️ npm install
▶️ npm start

PS C:\react\vite-mod-fed> cd .\wp-host\
PS C:\react\vite-mod-fed\wp-host> npm install
PS C:\react\vite-mod-fed\wp-host> npm run start
http://localhost:8080/

----------------------------------------------------------

"dev": "vite --port 5001 --strictPort",
The ""--port 5001 --strictPort" part meaning running in port 5001, and if you couldn't get hold of 5001, don't do anything, just fail silently.
Only the remote need to have a specific port because all other app is going to reference this port number for remote setting.
But the host app does not matter which port it is using


The location of the remoteEntry.js file:
This is going into the assets directory and that's because this remoteEntry file and all of the bundles that are references are just JavaScript files.
And they should be treated and deployed like assets. So what happens to the sharing between two applications if the application that's sharing that component
that I rely on goes down? Well, nothing, because what you should do is you should go and deploy your assets, in this case,
all your CSS, your JavaScript, your images, all of it should be deployed to a static asset store, and that includes all the federate modules.
So yes, your application could go down, but that's just the server side of your application. The static assets should never go down because those should
always be deployed on something like S3, which is never going to go down. And if S3 goes go down, well, then it's a holiday for everybody, so don't worry about that.


shared: ['react', 'react-dom']
So we don't en dup downloading multiple copies because that would just be bad for both performance and also for the stability of the app.
So this allows for the module federation to arbitrate between the host and remote and say, Hey, I've got React. Great, you've got React. Cool.

Share state
One of the thing you want to do with micro frontend is share a state between the host application and the micro frontend, for example, the user ID.
Now the way that I strongly recommend doing that is with an atomic state manager, either Recoil or Jotai. Both of those work well.
E.g.
We're going to have a shared state store in remote application that's going to hold the value for click me and then we're going to
attach to that in the application itself so taht when I click 'click me', count update and we shared between the two button in the remote app.
It's pretty rudimentary but it will show sharing between the host application, in this case remote and its own button.
And then over the Host application, we'll do the same thing in host. so we'll see how to share state and subscribe to shared state.
https://recoiljs.org/
https://jotai.org/


In the C:\react\vite-mod-fed\remote\src\store.ts
  We will have a custom hook called useCount, which will return a use atom that's going to give us back a value for it
  as well as a setter in a tuple pretty much like useState. So that will be the default output of this store,
  will be this useCount and that we can use for our count.
In the C:\react\vite-mod-fed\remote\vite.config.ts
  And you also need to share the store between the remote application and the host application in vite.config.ts.
  (and need to add the jotia library into the shared list as well)
In the C:\react\vite-mod-fed\host\src\App.tsx
   const [count, setCount] = useStore();
   This force both <button> and <Button> use the same useCount hook defined in C:\react\vite-mod-fed\remote\src\store.ts
   so the count value is consistent updated.
   "Note01 - Each app can shared state between own App button and remote app Button.jpg"
In this pattern, you can have your userId, you can have your cart, you can have all these all on shared pieces of atomic state.

Why choose Recoil or Jotai over Rudux and Zustand
  Now why do i recommend using something like Jotai share atoms for sharing state between a host application and its micro frontends.
  as opposed to something is, say, more conventional like Redux or Zustand? Well, what are we trying to accomplish with shared state?
  We're trying to accomplish a coupling between the host application and the micro frontends. The more state that you share between
  those two things, the tighter that coupling becomes. If you have something just like the user ID and then the contents of the cart,
  that's a pretty small surface area to exchange between those two. The great thing about the atomic state management like this is
  to extends the surface area that you want to share between those two applications, you need to go and add new atoms.
  Whereas with Redux ro Zustand, you can just extend the size of the store. So there's not friction to adding new data that's sharing
  between the application and the micro frontend. And that's not great. Because the more data you share, the tighter the coupling becomes.





